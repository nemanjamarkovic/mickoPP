Terminals unused in grammar

    _


Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body

    6 parameter: %empty
    7          | pars

    8 pars: _TYPE _ID
    9     | pars _COMMA _TYPE _ID

   10 $@2: %empty

   11 body: _LBRACKET variable_list $@2 statement_list _RBRACKET

   12 body_finish: _LBRACKET variable_list statement_list _RBRACKET
   13            | _LBRACKET variable_list statement_list _FINISH _SEMICOLON _RBRACKET

   14 variable_list: %empty
   15              | variable_list variable

   16 vars: _ID
   17     | vars _COMMA _ID

   18 type: _TYPE

   19 variable: type vars _SEMICOLON

   20 statement_list: %empty
   21               | statement_list statement

   22 statement: compound_statement
   23          | assignment_statement
   24          | if_statement
   25          | return_statement
   26          | increment_statement
   27          | for
   28          | check_statement

   29 compound_statement: _LBRACKET statement_list _RBRACKET

   30 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   31 num_exp: exp
   32        | num_exp _AROP exp

   33 exp: literal
   34    | _ID
   35    | increment
   36    | function_call
   37    | _LPAREN num_exp _RPAREN

   38 literal: _INT_NUMBER
   39        | _UINT_NUMBER

   40 increment: _ID _INCREMENT

   41 increment_statement: increment _SEMICOLON

   42 $@3: %empty

   43 function_call: _ID $@3 _LPAREN argument _RPAREN

   44 argument: %empty
   45         | arguments

   46 arguments: num_exp
   47          | arguments _COMMA num_exp

   48 if_statement: if_part
   49             | if_part _ELSE statement

   50 @4: %empty

   51 $@5: %empty

   52 if_part: _IF _LPAREN @4 log_exp $@5 _RPAREN statement

   53 log_exp: rel_exp
   54        | log_exp _AND rel_exp
   55        | log_exp _OR rel_exp

   56 rel_exp: num_exp _RELOP num_exp

   57 return_statement: _RETURN num_exp _SEMICOLON
   58                 | _RETURN _SEMICOLON

   59 @6: %empty

   60 $@7: %empty

   61 for: _FOR _TYPE _ID @6 _IN _LPAREN literal _DDOT literal _RPAREN $@7 body

   62 $@8: %empty

   63 when: _WHEN literal $@8 _FOLLOWS body_finish

   64 otherwise: _OTHERW _FOLLOWS body_finish

   65 $@9: %empty

   66 $@10: %empty

   67 check_statement: _CHECK _LPAREN _ID $@9 _RPAREN _LBRACKET check $@10 _RBRACKET

   68 when_list: when
   69          | when_list when

   70 check: when_list
   71      | when_list otherwise


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _TYPE <i> (258) 5 8 9 18 61
    _IF (259) 52
    _ELSE (260) 49
    _RETURN (261) 57 58
    _ID <s> (262) 5 8 9 16 17 30 34 40 43 61 67
    _INT_NUMBER <s> (263) 38
    _UINT_NUMBER <s> (264) 39
    _LPAREN (265) 5 37 43 52 61 67
    _RPAREN (266) 5 37 43 52 61 67
    _COMMA (267) 9 17 47
    _LBRACKET (268) 11 12 13 29 67
    _RBRACKET (269) 11 12 13 29 67
    _ASSIGN (270) 30
    _SEMICOLON (271) 13 19 30 41 57 58
    _INCREMENT (272) 40
    _AND (273) 54
    _ (274)
    _AROP <i> (275) 32
    _RELOP <i> (276) 56
    _OR (277) 55
    _FOR (278) 61
    _IN (279) 61
    _DDOT (280) 61
    _FINISH (281) 13
    _OTHERW (282) 64
    _CHECK (283) 67
    _WHEN (284) 63
    _FOLLOWS (285) 63 64
    ONLY_IF (286)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    function_list (34)
        on left: 2 3
        on right: 1 3
    function (35)
        on left: 5
        on right: 2 3
    $@1 (36)
        on left: 4
        on right: 5
    parameter (37)
        on left: 6 7
        on right: 5
    pars (38)
        on left: 8 9
        on right: 7 9
    body (39)
        on left: 11
        on right: 5 61
    $@2 (40)
        on left: 10
        on right: 11
    body_finish (41)
        on left: 12 13
        on right: 63 64
    variable_list (42)
        on left: 14 15
        on right: 11 12 13 15
    vars <s> (43)
        on left: 16 17
        on right: 17 19
    type (44)
        on left: 18
        on right: 19
    variable <i> (45)
        on left: 19
        on right: 15
    statement_list (46)
        on left: 20 21
        on right: 11 12 13 21 29
    statement (47)
        on left: 22 23 24 25 26 27 28
        on right: 21 49 52
    compound_statement (48)
        on left: 29
        on right: 22
    assignment_statement (49)
        on left: 30
        on right: 23
    num_exp <i> (50)
        on left: 31 32
        on right: 30 32 37 46 47 56 57
    exp <i> (51)
        on left: 33 34 35 36 37
        on right: 31 32
    literal <i> (52)
        on left: 38 39
        on right: 33 61 63
    increment <i> (53)
        on left: 40
        on right: 35 41
    increment_statement (54)
        on left: 41
        on right: 26
    function_call <i> (55)
        on left: 43
        on right: 36
    $@3 (56)
        on left: 42
        on right: 43
    argument <i> (57)
        on left: 44 45
        on right: 43
    arguments <i> (58)
        on left: 46 47
        on right: 45 47
    if_statement (59)
        on left: 48 49
        on right: 24
    if_part <i> (60)
        on left: 52
        on right: 48 49
    @4 (61)
        on left: 50
        on right: 52
    $@5 (62)
        on left: 51
        on right: 52
    log_exp <i> (63)
        on left: 53 54 55
        on right: 52 54 55
    rel_exp <i> (64)
        on left: 56
        on right: 53 54 55
    return_statement (65)
        on left: 57 58
        on right: 25
    for (66)
        on left: 61
        on right: 27
    @6 (67)
        on left: 59
        on right: 61
    $@7 (68)
        on left: 60
        on right: 61
    when <i> (69)
        on left: 63
        on right: 68 69
    $@8 (70)
        on left: 62
        on right: 63
    otherwise <i> (71)
        on left: 64
        on right: 71
    check_statement (72)
        on left: 67
        on right: 28
    $@9 (73)
        on left: 65
        on right: 67
    $@10 (74)
        on left: 66
        on right: 67
    when_list <i> (75)
        on left: 68 69
        on right: 69 70 71
    check <i> (76)
        on left: 70 71
        on right: 67


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    5 function: _TYPE . _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    5 function: _TYPE _ID . $@1 _LPAREN parameter _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    5 function: _TYPE _ID $@1 . _LPAREN parameter _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    5 function: _TYPE _ID $@1 _LPAREN . parameter _RPAREN body

    _TYPE  shift, and go to state 10

    $default  reduce using rule 6 (parameter)

    parameter  go to state 11
    pars       go to state 12


State 10

    8 pars: _TYPE . _ID

    _ID  shift, and go to state 13


State 11

    5 function: _TYPE _ID $@1 _LPAREN parameter . _RPAREN body

    _RPAREN  shift, and go to state 14


State 12

    7 parameter: pars .
    9 pars: pars . _COMMA _TYPE _ID

    _COMMA  shift, and go to state 15

    $default  reduce using rule 7 (parameter)


State 13

    8 pars: _TYPE _ID .

    $default  reduce using rule 8 (pars)


State 14

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN . body

    _LBRACKET  shift, and go to state 16

    body  go to state 17


State 15

    9 pars: pars _COMMA . _TYPE _ID

    _TYPE  shift, and go to state 18


State 16

   11 body: _LBRACKET . variable_list $@2 statement_list _RBRACKET

    $default  reduce using rule 14 (variable_list)

    variable_list  go to state 19


State 17

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body .

    $default  reduce using rule 5 (function)


State 18

    9 pars: pars _COMMA _TYPE . _ID

    _ID  shift, and go to state 20


State 19

   11 body: _LBRACKET variable_list . $@2 statement_list _RBRACKET
   15 variable_list: variable_list . variable

    _TYPE  shift, and go to state 21

    $default  reduce using rule 10 ($@2)

    $@2       go to state 22
    type      go to state 23
    variable  go to state 24


State 20

    9 pars: pars _COMMA _TYPE _ID .

    $default  reduce using rule 9 (pars)


State 21

   18 type: _TYPE .

    $default  reduce using rule 18 (type)


State 22

   11 body: _LBRACKET variable_list $@2 . statement_list _RBRACKET

    $default  reduce using rule 20 (statement_list)

    statement_list  go to state 25


State 23

   19 variable: type . vars _SEMICOLON

    _ID  shift, and go to state 26

    vars  go to state 27


State 24

   15 variable_list: variable_list variable .

    $default  reduce using rule 15 (variable_list)


State 25

   11 body: _LBRACKET variable_list $@2 statement_list . _RBRACKET
   21 statement_list: statement_list . statement

    _IF        shift, and go to state 28
    _RETURN    shift, and go to state 29
    _ID        shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _RBRACKET  shift, and go to state 32
    _FOR       shift, and go to state 33
    _CHECK     shift, and go to state 34

    statement             go to state 35
    compound_statement    go to state 36
    assignment_statement  go to state 37
    increment             go to state 38
    increment_statement   go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42
    for                   go to state 43
    check_statement       go to state 44


State 26

   16 vars: _ID .

    $default  reduce using rule 16 (vars)


State 27

   17 vars: vars . _COMMA _ID
   19 variable: type vars . _SEMICOLON

    _COMMA      shift, and go to state 45
    _SEMICOLON  shift, and go to state 46


State 28

   52 if_part: _IF . _LPAREN @4 log_exp $@5 _RPAREN statement

    _LPAREN  shift, and go to state 47


State 29

   57 return_statement: _RETURN . num_exp _SEMICOLON
   58                 | _RETURN . _SEMICOLON

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51
    _SEMICOLON    shift, and go to state 52

    num_exp        go to state 53
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57


State 30

   30 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON
   40 increment: _ID . _INCREMENT

    _ASSIGN     shift, and go to state 58
    _INCREMENT  shift, and go to state 59


State 31

   29 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 20 (statement_list)

    statement_list  go to state 60


State 32

   11 body: _LBRACKET variable_list $@2 statement_list _RBRACKET .

    $default  reduce using rule 11 (body)


State 33

   61 for: _FOR . _TYPE _ID @6 _IN _LPAREN literal _DDOT literal _RPAREN $@7 body

    _TYPE  shift, and go to state 61


State 34

   67 check_statement: _CHECK . _LPAREN _ID $@9 _RPAREN _LBRACKET check $@10 _RBRACKET

    _LPAREN  shift, and go to state 62


State 35

   21 statement_list: statement_list statement .

    $default  reduce using rule 21 (statement_list)


State 36

   22 statement: compound_statement .

    $default  reduce using rule 22 (statement)


State 37

   23 statement: assignment_statement .

    $default  reduce using rule 23 (statement)


State 38

   41 increment_statement: increment . _SEMICOLON

    _SEMICOLON  shift, and go to state 63


State 39

   26 statement: increment_statement .

    $default  reduce using rule 26 (statement)


State 40

   24 statement: if_statement .

    $default  reduce using rule 24 (statement)


State 41

   48 if_statement: if_part .
   49             | if_part . _ELSE statement

    _ELSE  shift, and go to state 64

    $default  reduce using rule 48 (if_statement)


State 42

   25 statement: return_statement .

    $default  reduce using rule 25 (statement)


State 43

   27 statement: for .

    $default  reduce using rule 27 (statement)


State 44

   28 statement: check_statement .

    $default  reduce using rule 28 (statement)


State 45

   17 vars: vars _COMMA . _ID

    _ID  shift, and go to state 65


State 46

   19 variable: type vars _SEMICOLON .

    $default  reduce using rule 19 (variable)


State 47

   52 if_part: _IF _LPAREN . @4 log_exp $@5 _RPAREN statement

    $default  reduce using rule 50 (@4)

    @4  go to state 66


State 48

   34 exp: _ID .
   40 increment: _ID . _INCREMENT
   43 function_call: _ID . $@3 _LPAREN argument _RPAREN

    _INCREMENT  shift, and go to state 59

    _LPAREN   reduce using rule 42 ($@3)
    $default  reduce using rule 34 (exp)

    $@3  go to state 67


State 49

   38 literal: _INT_NUMBER .

    $default  reduce using rule 38 (literal)


State 50

   39 literal: _UINT_NUMBER .

    $default  reduce using rule 39 (literal)


State 51

   37 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    num_exp        go to state 68
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57


State 52

   58 return_statement: _RETURN _SEMICOLON .

    $default  reduce using rule 58 (return_statement)


State 53

   32 num_exp: num_exp . _AROP exp
   57 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 69
    _AROP       shift, and go to state 70


State 54

   31 num_exp: exp .

    $default  reduce using rule 31 (num_exp)


State 55

   33 exp: literal .

    $default  reduce using rule 33 (exp)


State 56

   35 exp: increment .

    $default  reduce using rule 35 (exp)


State 57

   36 exp: function_call .

    $default  reduce using rule 36 (exp)


State 58

   30 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    num_exp        go to state 71
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57


State 59

   40 increment: _ID _INCREMENT .

    $default  reduce using rule 40 (increment)


State 60

   21 statement_list: statement_list . statement
   29 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 28
    _RETURN    shift, and go to state 29
    _ID        shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _RBRACKET  shift, and go to state 72
    _FOR       shift, and go to state 33
    _CHECK     shift, and go to state 34

    statement             go to state 35
    compound_statement    go to state 36
    assignment_statement  go to state 37
    increment             go to state 38
    increment_statement   go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42
    for                   go to state 43
    check_statement       go to state 44


State 61

   61 for: _FOR _TYPE . _ID @6 _IN _LPAREN literal _DDOT literal _RPAREN $@7 body

    _ID  shift, and go to state 73


State 62

   67 check_statement: _CHECK _LPAREN . _ID $@9 _RPAREN _LBRACKET check $@10 _RBRACKET

    _ID  shift, and go to state 74


State 63

   41 increment_statement: increment _SEMICOLON .

    $default  reduce using rule 41 (increment_statement)


State 64

   49 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 28
    _RETURN    shift, and go to state 29
    _ID        shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _FOR       shift, and go to state 33
    _CHECK     shift, and go to state 34

    statement             go to state 75
    compound_statement    go to state 36
    assignment_statement  go to state 37
    increment             go to state 38
    increment_statement   go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42
    for                   go to state 43
    check_statement       go to state 44


State 65

   17 vars: vars _COMMA _ID .

    $default  reduce using rule 17 (vars)


State 66

   52 if_part: _IF _LPAREN @4 . log_exp $@5 _RPAREN statement

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    num_exp        go to state 76
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57
    log_exp        go to state 77
    rel_exp        go to state 78


State 67

   43 function_call: _ID $@3 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 79


State 68

   32 num_exp: num_exp . _AROP exp
   37 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 80
    _AROP    shift, and go to state 70


State 69

   57 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 57 (return_statement)


State 70

   32 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    exp            go to state 81
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57


State 71

   30 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   32 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 82
    _AROP       shift, and go to state 70


State 72

   29 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 29 (compound_statement)


State 73

   61 for: _FOR _TYPE _ID . @6 _IN _LPAREN literal _DDOT literal _RPAREN $@7 body

    $default  reduce using rule 59 (@6)

    @6  go to state 83


State 74

   67 check_statement: _CHECK _LPAREN _ID . $@9 _RPAREN _LBRACKET check $@10 _RBRACKET

    $default  reduce using rule 65 ($@9)

    $@9  go to state 84


State 75

   49 if_statement: if_part _ELSE statement .

    $default  reduce using rule 49 (if_statement)


State 76

   32 num_exp: num_exp . _AROP exp
   56 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 70
    _RELOP  shift, and go to state 85


State 77

   52 if_part: _IF _LPAREN @4 log_exp . $@5 _RPAREN statement
   54 log_exp: log_exp . _AND rel_exp
   55        | log_exp . _OR rel_exp

    _AND  shift, and go to state 86
    _OR   shift, and go to state 87

    $default  reduce using rule 51 ($@5)

    $@5  go to state 88


State 78

   53 log_exp: rel_exp .

    $default  reduce using rule 53 (log_exp)


State 79

   43 function_call: _ID $@3 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    $default  reduce using rule 44 (argument)

    num_exp        go to state 89
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57
    argument       go to state 90
    arguments      go to state 91


State 80

   37 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 37 (exp)


State 81

   32 num_exp: num_exp _AROP exp .

    $default  reduce using rule 32 (num_exp)


State 82

   30 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 30 (assignment_statement)


State 83

   61 for: _FOR _TYPE _ID @6 . _IN _LPAREN literal _DDOT literal _RPAREN $@7 body

    _IN  shift, and go to state 92


State 84

   67 check_statement: _CHECK _LPAREN _ID $@9 . _RPAREN _LBRACKET check $@10 _RBRACKET

    _RPAREN  shift, and go to state 93


State 85

   56 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    num_exp        go to state 94
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57


State 86

   54 log_exp: log_exp _AND . rel_exp

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    num_exp        go to state 76
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57
    rel_exp        go to state 95


State 87

   55 log_exp: log_exp _OR . rel_exp

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    num_exp        go to state 76
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57
    rel_exp        go to state 96


State 88

   52 if_part: _IF _LPAREN @4 log_exp $@5 . _RPAREN statement

    _RPAREN  shift, and go to state 97


State 89

   32 num_exp: num_exp . _AROP exp
   46 arguments: num_exp .

    _AROP  shift, and go to state 70

    $default  reduce using rule 46 (arguments)


State 90

   43 function_call: _ID $@3 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 98


State 91

   45 argument: arguments .
   47 arguments: arguments . _COMMA num_exp

    _COMMA  shift, and go to state 99

    $default  reduce using rule 45 (argument)


State 92

   61 for: _FOR _TYPE _ID @6 _IN . _LPAREN literal _DDOT literal _RPAREN $@7 body

    _LPAREN  shift, and go to state 100


State 93

   67 check_statement: _CHECK _LPAREN _ID $@9 _RPAREN . _LBRACKET check $@10 _RBRACKET

    _LBRACKET  shift, and go to state 101


State 94

   32 num_exp: num_exp . _AROP exp
   56 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 70

    $default  reduce using rule 56 (rel_exp)


State 95

   54 log_exp: log_exp _AND rel_exp .

    $default  reduce using rule 54 (log_exp)


State 96

   55 log_exp: log_exp _OR rel_exp .

    $default  reduce using rule 55 (log_exp)


State 97

   52 if_part: _IF _LPAREN @4 log_exp $@5 _RPAREN . statement

    _IF        shift, and go to state 28
    _RETURN    shift, and go to state 29
    _ID        shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _FOR       shift, and go to state 33
    _CHECK     shift, and go to state 34

    statement             go to state 102
    compound_statement    go to state 36
    assignment_statement  go to state 37
    increment             go to state 38
    increment_statement   go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42
    for                   go to state 43
    check_statement       go to state 44


State 98

   43 function_call: _ID $@3 _LPAREN argument _RPAREN .

    $default  reduce using rule 43 (function_call)


State 99

   47 arguments: arguments _COMMA . num_exp

    _ID           shift, and go to state 48
    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50
    _LPAREN       shift, and go to state 51

    num_exp        go to state 103
    exp            go to state 54
    literal        go to state 55
    increment      go to state 56
    function_call  go to state 57


State 100

   61 for: _FOR _TYPE _ID @6 _IN _LPAREN . literal _DDOT literal _RPAREN $@7 body

    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50

    literal  go to state 104


State 101

   67 check_statement: _CHECK _LPAREN _ID $@9 _RPAREN _LBRACKET . check $@10 _RBRACKET

    _WHEN  shift, and go to state 105

    when       go to state 106
    when_list  go to state 107
    check      go to state 108


State 102

   52 if_part: _IF _LPAREN @4 log_exp $@5 _RPAREN statement .

    $default  reduce using rule 52 (if_part)


State 103

   32 num_exp: num_exp . _AROP exp
   47 arguments: arguments _COMMA num_exp .

    _AROP  shift, and go to state 70

    $default  reduce using rule 47 (arguments)


State 104

   61 for: _FOR _TYPE _ID @6 _IN _LPAREN literal . _DDOT literal _RPAREN $@7 body

    _DDOT  shift, and go to state 109


State 105

   63 when: _WHEN . literal $@8 _FOLLOWS body_finish

    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50

    literal  go to state 110


State 106

   68 when_list: when .

    $default  reduce using rule 68 (when_list)


State 107

   69 when_list: when_list . when
   70 check: when_list .
   71      | when_list . otherwise

    _OTHERW  shift, and go to state 111
    _WHEN    shift, and go to state 105

    $default  reduce using rule 70 (check)

    when       go to state 112
    otherwise  go to state 113


State 108

   67 check_statement: _CHECK _LPAREN _ID $@9 _RPAREN _LBRACKET check . $@10 _RBRACKET

    $default  reduce using rule 66 ($@10)

    $@10  go to state 114


State 109

   61 for: _FOR _TYPE _ID @6 _IN _LPAREN literal _DDOT . literal _RPAREN $@7 body

    _INT_NUMBER   shift, and go to state 49
    _UINT_NUMBER  shift, and go to state 50

    literal  go to state 115


State 110

   63 when: _WHEN literal . $@8 _FOLLOWS body_finish

    $default  reduce using rule 62 ($@8)

    $@8  go to state 116


State 111

   64 otherwise: _OTHERW . _FOLLOWS body_finish

    _FOLLOWS  shift, and go to state 117


State 112

   69 when_list: when_list when .

    $default  reduce using rule 69 (when_list)


State 113

   71 check: when_list otherwise .

    $default  reduce using rule 71 (check)


State 114

   67 check_statement: _CHECK _LPAREN _ID $@9 _RPAREN _LBRACKET check $@10 . _RBRACKET

    _RBRACKET  shift, and go to state 118


State 115

   61 for: _FOR _TYPE _ID @6 _IN _LPAREN literal _DDOT literal . _RPAREN $@7 body

    _RPAREN  shift, and go to state 119


State 116

   63 when: _WHEN literal $@8 . _FOLLOWS body_finish

    _FOLLOWS  shift, and go to state 120


State 117

   64 otherwise: _OTHERW _FOLLOWS . body_finish

    _LBRACKET  shift, and go to state 121

    body_finish  go to state 122


State 118

   67 check_statement: _CHECK _LPAREN _ID $@9 _RPAREN _LBRACKET check $@10 _RBRACKET .

    $default  reduce using rule 67 (check_statement)


State 119

   61 for: _FOR _TYPE _ID @6 _IN _LPAREN literal _DDOT literal _RPAREN . $@7 body

    $default  reduce using rule 60 ($@7)

    $@7  go to state 123


State 120

   63 when: _WHEN literal $@8 _FOLLOWS . body_finish

    _LBRACKET  shift, and go to state 121

    body_finish  go to state 124


State 121

   12 body_finish: _LBRACKET . variable_list statement_list _RBRACKET
   13            | _LBRACKET . variable_list statement_list _FINISH _SEMICOLON _RBRACKET

    $default  reduce using rule 14 (variable_list)

    variable_list  go to state 125


State 122

   64 otherwise: _OTHERW _FOLLOWS body_finish .

    $default  reduce using rule 64 (otherwise)


State 123

   61 for: _FOR _TYPE _ID @6 _IN _LPAREN literal _DDOT literal _RPAREN $@7 . body

    _LBRACKET  shift, and go to state 16

    body  go to state 126


State 124

   63 when: _WHEN literal $@8 _FOLLOWS body_finish .

    $default  reduce using rule 63 (when)


State 125

   12 body_finish: _LBRACKET variable_list . statement_list _RBRACKET
   13            | _LBRACKET variable_list . statement_list _FINISH _SEMICOLON _RBRACKET
   15 variable_list: variable_list . variable

    _TYPE  shift, and go to state 21

    $default  reduce using rule 20 (statement_list)

    type            go to state 23
    variable        go to state 24
    statement_list  go to state 127


State 126

   61 for: _FOR _TYPE _ID @6 _IN _LPAREN literal _DDOT literal _RPAREN $@7 body .

    $default  reduce using rule 61 (for)


State 127

   12 body_finish: _LBRACKET variable_list statement_list . _RBRACKET
   13            | _LBRACKET variable_list statement_list . _FINISH _SEMICOLON _RBRACKET
   21 statement_list: statement_list . statement

    _IF        shift, and go to state 28
    _RETURN    shift, and go to state 29
    _ID        shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _RBRACKET  shift, and go to state 128
    _FOR       shift, and go to state 33
    _FINISH    shift, and go to state 129
    _CHECK     shift, and go to state 34

    statement             go to state 35
    compound_statement    go to state 36
    assignment_statement  go to state 37
    increment             go to state 38
    increment_statement   go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42
    for                   go to state 43
    check_statement       go to state 44


State 128

   12 body_finish: _LBRACKET variable_list statement_list _RBRACKET .

    $default  reduce using rule 12 (body_finish)


State 129

   13 body_finish: _LBRACKET variable_list statement_list _FINISH . _SEMICOLON _RBRACKET

    _SEMICOLON  shift, and go to state 130


State 130

   13 body_finish: _LBRACKET variable_list statement_list _FINISH _SEMICOLON . _RBRACKET

    _RBRACKET  shift, and go to state 131


State 131

   13 body_finish: _LBRACKET variable_list statement_list _FINISH _SEMICOLON _RBRACKET .

    $default  reduce using rule 13 (body_finish)
